const char depthpass_lua[] = "local depthWriteMat = CreateMaterial( \"egsm/depthmat\", \"DepthWrite\", {\n""  [\"$no_fullbright\"] = \"1\",\n""  [\"$color_depth\"] = \"1\",\n""  [\"$alpha_test\"] = \"0\",\n""} )\n""local fixResolvedfullframedepthMat\n""\n""local bDepthPass = false\n""local halo = {}\n""local render = render\n""\n""MaterialOverride 	   =  	MaterialOverride or render.MaterialOverride\n""BrushMaterialOverride  = 	BrushMaterialOverride or render.BrushMaterialOverride \n""WorldMaterialOverride  = 	WorldMaterialOverride or render.WorldMaterialOverride \n""ModelMaterialOverride  = 	ModelMaterialOverride or render.ModelMaterialOverride \n""\n""local MaterialOverride = MaterialOverride\n""local BrushMaterialOverride = BrushMaterialOverride\n""local WorldMaterialOverride = WorldMaterialOverride\n""local ModelMaterialOverride = ModelMaterialOverride\n""\n""local MatMaterialOverride \n""local MatBrushMaterialOverride\n""local MatWorldMaterialOverride\n""local MatModelMaterialOverride\n""\n""function render.MaterialOverride(m)\n""	MatMaterialOverride = m\n""	if bDepthPass then return end\n""	MaterialOverride(m)\n""end\n""\n""function render.BrushMaterialOverride(m)\n""	MatBrushMaterialOverride = m\n""	if bDepthPass then return end\n""	BrushMaterialOverride(m)\n""end\n""\n""function render.WorldMaterialOverride(m)\n""	MatWorldMaterialOverride = m\n""	if bDepthPass then return end\n""	WorldMaterialOverride(m)\n""end\n""function render.ModelMaterialOverride(m)\n""	MatModelMaterialOverride = m\n""	if bDepthPass then return end\n""	ModelMaterialOverride(m)\n""end\n""\n""local function dummyFn() end\n""\n""local PushRenderTarget  = 	render.PushRenderTarget\n""local PopRenderTarget  = 	render.PopRenderTarget\n""local rClear  = render.Clear\n""local depthRT = render.GetResolvedFullFrameDepth()\n""local hRender = dummyFn\n""local BeginDepthPass = shaderlib.BeginDepthPass\n""local EndDepthPass = shaderlib.EndDepthPass\n""local RenderView = render.RenderView\n""local rClearDepth = render.ClearDepth\n""local resolvedDepthRT = render.GetResolvedFullFrameDepth()\n""local function PreDrawEffectsHK() \n""	if bDepthPass then return end\n""	bDepthPass = true\n""	\n""	halo.Render = dummyFn\n""	\n""	MaterialOverride( depthWriteMat )\n""	BrushMaterialOverride( depthWriteMat )\n""	WorldMaterialOverride( depthWriteMat )\n""	ModelMaterialOverride( depthWriteMat )\n""	\n""	BeginDepthPass()\n""		rClear(0,0,0,0) \n""		\n""		rClear(0,0,0,0)\n""		\n""		rClear(0,0,0,0) \n""\n""		RenderView()\n""	EndDepthPass()\n""\n""	MaterialOverride(MatMaterialOverride)\n""	BrushMaterialOverride(MatBrushMaterialOverride)\n""	WorldMaterialOverride(MatWorldMaterialOverride)\n""	ModelMaterialOverride(MatModelMaterialOverride)\n""	\n""	halo.Render = hRender\n""	bDepthPass = false\n""	\n""	render.PushRenderTarget(resolvedDepthRT)\n""		render.Clear(0,0,0,0, true, true)\n""		render.SetMaterial(fixResolvedfullframedepthMat)\n""		render.DrawScreenQuad()\n""	render.PopRenderTarget()\n""end\n""\n""local zero_vec = Vector(0,0,0)\n""local min,max = zero_vec, zero_vec\n""\n""function shaderlib.__INIT()\n""	halo = halo\n""	hRender = halo.Render\n""	\n""	hook.Add(\"PreRender\", \"!!!EGSM_ImTooLazy\", function() \n""		MatMaterialOverride 	 = nil\n""		MatBrushMaterialOverride = nil\n""		MatWorldMaterialOverride = nil\n""		MatModelMaterialOverride = nil\n""	end)	\n""	hook.Add(\"PreDrawViewModel\", \"!!!EGSM_ImTooLazy\", function() if bDepthPass then rClearDepth() end end)	\n""	hook.Add(\"NeedsDepthPass\", \"!!!EGSM_ImTooLazy\", PreDrawEffectsHK)\n""	\n""	hook.Add(\"PostDraw2DSkyBox\", \"!!!EGSM_ImTooLazy\", function()\n""		local rt = render.GetRenderTarget()\n""		if !rt or rt:GetName() != \"egsm_skyboxrt\" \n""		then  \n""			return\n""		end\n""		cam.Start3D( zero_vec, EyeAngles() )\n""		min,max = game.GetWorld():GetModelBounds()\n""	\n""		render.SetMaterial( depthWriteMat )\n""		\n""		render.DrawBox( zero_vec, angle_zero, max, min, color_white )\n""		cam.End3D()\n""	end)\n""	\n""	\n""	shaderlib.CompileVertexShader(\"FixResolvedfullframedepthVS\", 0, [==[\n""	#include \"common_vs_fxc.h\"\n""	struct VS_INPUT\n""	{\n""		float4 vPos					: POSITION;\n""		float4 vTexCoord				: TEXCOORD0;\n""	};\n""\n""	struct VS_OUTPUT\n""	{\n""		float4 projPosSetup	: POSITION;\n""		float4 vTexCoord				: TEXCOORD0;\n""	};\n""\n""	VS_OUTPUT main( const VS_INPUT v )\n""	{\n""		VS_OUTPUT o = (VS_OUTPUT)0;\n""		o.projPosSetup = mul( v.vPos, cViewProj );\n""		o.vTexCoord = v.vTexCoord;\n""		return o;\n""	}\n""	]==]) \n""\n""	shaderlib.CompilePixelShader(\"FixResolvedfullframedepthPS\", 0, [==[\n""	sampler WDBuffer : register(s0);\n""\n""	struct PS_IN\n""	{\n""		float2 vTexCoord				: TEXCOORD0;\n""	};\n""\n""	float4 main(PS_IN i ) : COLOR\n""	{\n""		return float4((1/tex2D(WDBuffer, i.vTexCoord).w)/4000,0,0,1);\n""	};  \n""	]==])\n""\n""\n""	local shader = shaderlib.NewShader(\"FixResolvedfullframedepth\")\n""	 \n""	shader:SetPixelShader(\"FixResolvedfullframedepthPS\")\n""	shader:SetVertexShader(\"FixResolvedfullframedepthVS\")\n""\n""	shader:SetParamDefValue(PARAM_BASETEXTURE, \"_rt_WPNDepth\")\n""	shader:BindTexture(0, PARAM_BASETEXTURE)\n""\n""	fixResolvedfullframedepthMat = CreateMaterial(\"EGSMFixResolvedfullframedepth\", \"FixResolvedfullframedepth\", {} )\n""end\n";